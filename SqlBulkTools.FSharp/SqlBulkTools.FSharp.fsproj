<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>SqlBulkTools.FSharp</PackageId>
    <Authors>tiagorosendo, zek99, gtaylor44, JordanMarr</Authors>
    <Company />
    <PackageProjectUrl>https://github.com/JordanMarr/SqlBulkTools.FSharp</PackageProjectUrl>
    <RepositoryUrl>https://github.com/JordanMarr/SqlBulkTools.FSharp</RepositoryUrl>
    <PackageTags>sql bulk bulkinsert bulkupdate upsert fsharp</PackageTags>
    <Version>0.3.0</Version>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="Builders.fs" />
  </ItemGroup>

  <ItemGroup>
      <ProjectReference Include="..\SqlBulkTools.NetStandard\SqlBulkTools.NetStandard.csproj">
          <PrivateAssets>all</PrivateAssets>
      </ProjectReference>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Update="FSharp.Core" Version="4.7.2" />
  </ItemGroup>

  <!--
    The following solves the problem that 'dotnet pack' does not include the DLLs from referenced projects.
    See https://github.com/NuGet/Home/issues/3891 for a description of the problem
    and for newer versions / workarounds / built-in methods.
  -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    <!-- include PDBs in the NuGet package -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')-&gt;WithMetadataValue('PrivateAssets', 'all'))" />
    </ItemGroup>
  </Target>

</Project>
